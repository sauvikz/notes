As opposed to Python, exponentiation in R is done by ^ and modulo by %%
Assignment in R is done by <-
Basic data types in R

R works with numerous data types. Some of the most basic types to get started are:
Decimals values like 4.5 are called "numerics".
Natural numbers like 4 are called integers. Integers are also "numerics".
Boolean values (TRUE or FALSE) are called "logical".
Text (or string) values are called "characters"

As opposed to Python which used type() to get the data-type of an object, R uses class() to do the same.
R equivalent of Python lists is Vectors which can again store any data type (but the same data-type within a Vector, similar to Numpy arrays)
In R, you create vectors with the combine function denoted by c()
For example: numeric_vector <- c(1,2,3)
character_vector <- c("a", "b", "c")
1:9 is a schortcut for c(1:9)

Vector indices can be *named* with the names() function so for example:
poker_vector <- c(140, -50, 20, -120, 240)
names(poker_vector) <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
and so poker_vector when executed will give you:
Monday   Tuesday Wednesday  Thursday    Friday
   140       -50        20      -120       240
c(1, 2, 3) + c(4, 5, 6) will give you element-wise results!
sum(vector) -> will give you the sum of the Vector
mean(vector) -> will give you the average of the Vector
if x > y, then x > y in R will give you TRUE

As opposed to Python, indices in R begin with 1
poker_vector <- c(140, -50, 20, -120, 240)
to select the 2nd, 3rd and 5th element, you'll do poker_vector[c(2,3,5)]
to select the 2nd, 3rd and 4th element, you can do either poker_vector[c(2,3,4)] or poker_vector[c(2:4)], as opposed to Python, 4 here is inclusive
You can also select elements of a vector based off its *names*
so poker_vector <- c(140, -50, 20, -120, 240)
days_vector <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(poker_vector) <- days_vector
you can do poker_vector[c("Tuesday","Wednesday","Thursday")] to select the 2nd, 3rd and 4th element of the vector
Vector subsetting is exactly similar to List subsetting in Python
ie. vector[vector comparison_operand]

In R, a matrix is a collection of elements of the same data type (numeric, character, or logical) arranged into a fixed number of rows and columns.
Since you are only working with rows and columns, a matrix is called two-dimensional.

matrix(1:9, byrow=TRUE, nrow = 3)
Similar to Vectors, rows and columns can be named by "rownames()" and "colnames()" respectively
Remember that if you want to follow this convention, you will have to *flatten* out vectors first and then convert
the flattened Vector into a matrix.

rowSums() can be used to calculate the sum of every row.
colSums() can be used to calculate the sum of every column.
You can add a column or multiple columns to a matrix with the cbind() function, which merges matrices and/or vectors together by columns
example: cbind(matrix1, matrix2, matrix3....)
Similarly, rbind() can be used to bind rows to matrices. example: rbind(matrix1, matrix2, ...)
Matrix subsetting is similar to 2-d Lists subsetting in Python (except matrix[,2] in R instead of matrix[:,2] in Python)
Similar to Vectors, Matrices operate element-wise, so M1 * M2, will multiply the two matrices element-wise
For matrix multiplication, you can use M1 %*% M2!

Factors in R:
The term factor refers to a statistical data type used to store categorical variables.
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
factor_gender_vector <- factor(gender_vector)
There are two types of categorical variables: a nominal categorical variable and an ordinal categorical variable.

Ordinal Categorical Variables can be introduced by:
temperature_vector <- c("High", "Low", "High","Low", "Medium")
temperature_vector_factor <- factor(temperature_vector, order=TRUE, levels=c("Low","Medium","High"))

Factor Levels:
survey_vector <- c("M", "F", "F", "M", "M")
factor_survey_vector <- factor(survey_vector)

# Specify the levels of factor_survey_vector
levels(factor_survey_vector) <- c("Female","Male")
summary(variable) is equivalent to Pandas' value_counts() method

Dataframes in R:
Remember that R Matrices can only contain data of one data-type. If you want a mixture of data-types, this is where Dataframes will come in handy
data.frame(col1, col2, col3, ....)
str(dataframe) for structure
data_frame[,"column_name"] is the same as data_frame$column_name
Dataframe subsetting: data_frame[Vector of Booleans, c(col1, col2, col3...)]
This can also be done by the subset function!
subset(data_frame, subset=some_condition)

order() functions gives you the rank of elements in a Vector, for example:
> a <- c(100, 10, 1000)
> order(a)
[1] 2 1 3
a[order(a)] will reshuffle and *sort* the Vector
The same logic can be used to reshuffle an entire dataframe!

Lists in R:
A list is some kind super data type: you can store practically any piece of information in it (Vectors, Matrices, Dataframes, Other Lists etc.)!
You can name you list with the names() function or while creating the list: list(name1 = Vec1, name2 = Vec2, ...)
To select from lists: list[[1]] or list[["name"]] or list$name
You can add to a list simply by: ext_list <- c(my_list , my_val) where my_list is the old list and my_val is the new element you want to add.
If you want to add a named element: ext_list <- c(my_list, name = my_val)
