Python was developed by Guido Van Rossum
Ipython: Interactive Python (some juiced up version of Python)
Python exponentiation: **; for example: 4**2 = 16
Python modulo: %; for example 5%2 = 1
Python variables are case sensitive
Python Basic Data Types: Integer (int), Float (float), String (str), Boolean (bool)
type(variable): gives you the data type of the variable
use str(), float(), int(), bool() for type conversion
Python lists can contain *any* data types.
List is a data type of its own. List is a "compound data type" ie. you can group values together.
eg. a = "is"; b= "nice"; my_list = ["my", "list", a, b]
Lists can also contain lists.
List slicing [start:     end]
              inclusive: exclusive
say you have a list areas = ["hallway", 11.25, "kitchen", 18.0, "living room", 20.0, "bedroom", 10.75, "bathroom", 9.50]
and you want to extract the last 4 elements of this. You can do this by:
areas[-4:]; The last element in the list is always indexed as -1 so if you want to *include* this, you can't put anything on the right hand side of :
You can change list elements by *assignment*.
del(list[index]) will delete that particular entry
Remember that if x is some list and you do y = x, you are referencing the same list and so changing one will change the other.
You can copy lists by y = list(x) or y = x[:]
help(round) -> round(number[, ndigits]) -> number means that ndigits is *optional* and so by default it will round to the nearest integer.
help(function_name) or ?function_name should show you guides around how to use the function.
help(sorted): Signature: sorted(iterable, key=None, reverse=False) means that if you do not specify key, it'll be None by default
and if you do not specify reverse, it'll be False by default. reverse=True => Descending Order
Python built-in functions and Python Object Methods
fam = ['liz',1.7,'mom',1.8]
fam.index('mom')
fam.count(1.8)
sister = 'liz'
sister.capitalize() -> Liz
sister.replace('z','sa') -> lisa
room = 'poolhouse'
room_up = room.upper() -> POOLHOUSE
print(room.count('o')) -> 3 as there are 3 'o's in the poolhouse
List Methods:
append(), that adds an element to the list it is called on,
remove(), that removes the first element of a list that matches the input, and
reverse(), that reverses the order of the elements in the list it is called on.
Note: You can just do list.reverse() and the sequence will be reversed. You don't need to do any assignments.
Python will throw error for element-wise operations on lists.
example: a = [1,2,3] and b = [4,5,6]; a/(b**2) will throw errors. This is where Numpy will come handy.
Numpy array contains only *one* type. So np.array([1.0, "is", True]) will convert this to ['1.0', 'is', 'True'] ie. a list/array of strings!
This is called *type coercion*.
if a = [1,2,3] then a + a will give you [1,2,3,1,2,3] as this is a Python list. a*2 will give you the same result.
But if a = np.array([1,2,3]) then (a + a) or (a*2) will give you [2,4,6]!
Numpy subsetting! a = np.array([1,2,3]); then a[a > 1] will give you [2,3] as output! This is not possible with Python lists.
a = [[1,2,3],[4,5,6]]
s.shape -> (2,3); Note that shape here is an attribute and not a method so we are not using circular brackets.
a[0][1] is same as a[0,1]
For 2D array, element wise operations work similarly. eg, a = np.array([[1,2,3],[4,5,6]]) and so a.shape = (2,3); you can do element wise addition like
b = np.array([[2,2,2],[3,3,3]]) (a+b)
You can also multiply each element by a scalar; say c = [1.1, 3.4, 5.6] then a * c will multiply all rows with these numbers element wise.
np.mean(), np.median(), np.corrcoef(x1,x2), np.std(), np.sum(), np.sort()
